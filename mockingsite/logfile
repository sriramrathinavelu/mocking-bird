[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid': UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\nInput: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 => 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above problem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in the array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\tint i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhile(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString());\r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:32] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\nInput: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 => 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above problem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in the array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\tint i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhile(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString());\r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:32:33] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:37] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 249000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid': UUID('ebe48c63-08d6-11e5-980f-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the next immediate higher value of a given node in  a Binary Search Tree (BST)\r\n\r\nEx .If a  BST  is comprised of elements 2,3,6,9,7,4,13,24,19 such that the binary search tree property is satisfied then the immediate highest value for 9 should be 13\r\n\r\nPlease come up with an approach to solve this problem\r\n', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 248000), 'correctanswer': u"There are two cases to be considered.\r\n\r\nLet node be the given element for which the immediate highest element needs to be computed\r\n\r\nCase 1: The node has a right child\r\n\r\nThen the next greater element to the node is the left most child in the right subtree of the node.\r\n\r\nCase 2: The node has no right child\r\n\r\nRecursively traverse the node's parent until the parent is the left child. Then return that node's parent. If no such parent can be identified, then the node has to be the greatest element in the tree\r\n", 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 0}
[03/Jun/2015 08:32:38] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:51] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\nInput: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 => 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above problem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in the array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\tint i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhile(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString());\r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:32:53] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:56] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 249000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid': UUID('ebe48c63-08d6-11e5-980f-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the next immediate higher value of a given node in  a Binary Search Tree (BST)\r\n\r\nEx .If a  BST  is comprised of elements 2,3,6,9,7,4,13,24,19 such that the binary search tree property is satisfied then the immediate highest value for 9 should be 13\r\n\r\nPlease come up with an approach to solve this problem\r\n', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 248000), 'correctanswer': u"There are two cases to be considered.\r\n\r\nLet node be the given element for which the immediate highest element needs to be computed\r\n\r\nCase 1: The node has a right child\r\n\r\nThen the next greater element to the node is the left most child in the right subtree of the node.\r\n\r\nCase 2: The node has no right child\r\n\r\nRecursively traverse the node's parent until the parent is the left child. Then return that node's parent. If no such parent can be identified, then the node has to be the greatest element in the tree\r\n", 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 0}
[03/Jun/2015 08:32:57] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
