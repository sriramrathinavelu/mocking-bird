[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid': UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\nInput: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 => 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above problem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in the array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\tint i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhile(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString());\r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:32] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\nInput: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 => 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above problem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in the array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\tint i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhile(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString());\r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:32:33] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:37] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 249000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid': UUID('ebe48c63-08d6-11e5-980f-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the next immediate higher value of a given node in  a Binary Search Tree (BST)\r\n\r\nEx .If a  BST  is comprised of elements 2,3,6,9,7,4,13,24,19 such that the binary search tree property is satisfied then the immediate highest value for 9 should be 13\r\n\r\nPlease come up with an approach to solve this problem\r\n', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 248000), 'correctanswer': u"There are two cases to be considered.\r\n\r\nLet node be the given element for which the immediate highest element needs to be computed\r\n\r\nCase 1: The node has a right child\r\n\r\nThen the next greater element to the node is the left most child in the right subtree of the node.\r\n\r\nCase 2: The node has no right child\r\n\r\nRecursively traverse the node's parent until the parent is the left child. Then return that node's parent. If no such parent can be identified, then the node has to be the greatest element in the tree\r\n", 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 0}
[03/Jun/2015 08:32:38] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:51] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\nInput: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 => 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above problem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in the array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\tint i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhile(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString());\r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:32:53] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[03/Jun/2015 08:32:56] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 249000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid': UUID('ebe48c63-08d6-11e5-980f-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the next immediate higher value of a given node in  a Binary Search Tree (BST)\r\n\r\nEx .If a  BST  is comprised of elements 2,3,6,9,7,4,13,24,19 such that the binary search tree property is satisfied then the immediate highest value for 9 should be 13\r\n\r\nPlease come up with an approach to solve this problem\r\n', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 248000), 'correctanswer': u"There are two cases to be considered.\r\n\r\nLet node be the given element for which the immediate highest element needs to be computed\r\n\r\nCase 1: The node has a right child\r\n\r\nThen the next greater element to the node is the left most child in the right subtree of the node.\r\n\r\nCase 2: The node has no right child\r\n\r\nRecursively traverse the node's parent until the parent is the left child. Then return that node's parent. If no such parent can be identified, then the node has to be the greatest element in the tree\r\n", 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 0}
[03/Jun/2015 08:32:57] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid': UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime': None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 2 .... paathukalaam da', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pairs of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 1}
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[09/Jun/2015 07:10:55] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:29:09] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:44:50] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:00] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:09] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:03] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: False Existing combination: False
[09/Jun/2015 08:17:52] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:27:20] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:106] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:109] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:31:51] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 14:04:34] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:106] Adding company Amazon and position Software Developer
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:109] Existing Company: True Existing Position: True Existing combination: True
[11/Jun/2015 15:47:37] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[11/Jun/2015 22:01:50] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[11/Jun/2015 22:03:43] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[12/Jun/2015 16:45:58] DEBUG [mocktest.views:58] Start Time: 1434214800 End Time: 1434222000
[13/Jun/2015 17:06:15] DEBUG [mocktest.views:58] Start Time: 1434305100 End Time: 1434308700
[13/Jun/2015 18:44:26] DEBUG [mocktest.views:58] Start Time: 1434314640 End Time: 1434321840
[14/Jun/2015 14:50:42] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 14:51:19] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 15:18:59] DEBUG [mocktest.views:59] Start Time: 1434305880 End Time: 1434309480
[14/Jun/2015 18:20:03] DEBUG [mocktest.views:59] Start Time: 1434306000 End Time: 1434306120
[14/Jun/2015 18:25:37] DEBUG [mocktest.views:163] testId = f9bf5fd7-12c1-11e5-8c1f-4025c2cdc7f8 choice = 2
[15/Jun/2015 19:09:07] DEBUG [mocktest.views:59] Start Time: 1434396000 End Time: 1434399600
[15/Jun/2015 19:22:54] DEBUG [mocktest.views:163] testId = b97cefd9-1085-11e5-9210-4025c2cdc7f8 choice = 2
[15/Jun/2015 19:23:47] DEBUG [mocktest.views:163] testId = b97cefd9-1085-11e5-9210-4025c2cdc7f8 choice = 1
[16/Jun/2015 18:20:34] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position Software Developer
[16/Jun/2015 18:20:34] ERROR [mocktest.DAOUtil:118] Encounter exception Can't resolve column name: 'companyName'
[16/Jun/2015 19:16:17] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position Software Developer
[16/Jun/2015 19:40:11] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software-engineer-developer-interview-questions&n=1
[16/Jun/2015 19:40:11] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5658654214717440
[16/Jun/2015 19:40:12] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5126565916573696
[16/Jun/2015 19:40:13] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5646512375726080
[16/Jun/2015 19:40:14] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5687400464384000
[16/Jun/2015 19:40:14] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5129818670628864
[16/Jun/2015 19:40:15] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5758712897601536
[16/Jun/2015 19:40:16] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5652423706148864
[16/Jun/2015 19:40:18] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5743870841192448
[16/Jun/2015 19:40:20] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5674416807608320
[16/Jun/2015 19:40:22] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5631469919666176
[16/Jun/2015 19:40:23] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5145121580384256
[16/Jun/2015 19:40:25] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5706907457159168
[16/Jun/2015 19:40:27] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5750606333476864
[16/Jun/2015 19:40:31] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5737398201745408
[16/Jun/2015 19:40:32] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5701363426131968
[16/Jun/2015 19:40:33] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5651177001713664
[16/Jun/2015 19:40:35] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5673265078992896
[16/Jun/2015 19:40:37] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5138770022105088
[16/Jun/2015 19:40:40] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software-engineer-developer-interview-questions&n=2
[16/Jun/2015 19:40:40] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5765784060035072
[16/Jun/2015 19:40:41] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5073763695591424
[16/Jun/2015 19:40:42] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5717493200977920
[16/Jun/2015 19:40:44] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5183920823861248
[16/Jun/2015 19:40:47] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5647660555960320
[16/Jun/2015 19:40:52] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5743544090230784
[16/Jun/2015 19:40:53] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6203659591352320
[16/Jun/2015 19:40:54] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6293669489410048
[16/Jun/2015 19:40:56] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4792707167813632
[16/Jun/2015 19:40:57] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5726197774286848
[16/Jun/2015 19:40:58] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5067220493271040
[16/Jun/2015 19:40:59] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6312966362234880
[16/Jun/2015 19:41:01] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640618223075328
[16/Jun/2015 19:41:02] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5192351949520896
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software-engineer-developer-interview-questions&n=3
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5978736570662912
[16/Jun/2015 19:41:11] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6535983075950592
[16/Jun/2015 19:41:16] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6251247950626816
[16/Jun/2015 19:41:20] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6218115968925696
[16/Jun/2015 19:41:25] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6332980792393728
[16/Jun/2015 19:41:27] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6331656331853824
[16/Jun/2015 19:41:28] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5104398418051072
[16/Jun/2015 19:41:29] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5142823074529280
[16/Jun/2015 19:41:31] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5659044186423296
[16/Jun/2015 19:41:33] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5128688001613824
[16/Jun/2015 19:41:35] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5735545137266688
[16/Jun/2015 19:41:36] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6276805505843200
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4691284505657344
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5752996830904320
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software-engineer-developer-interview-questions&n=4
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6153780563279872
[16/Jun/2015 19:41:44] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5125946302529536
[16/Jun/2015 19:41:45] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640239645196288
[16/Jun/2015 19:41:48] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5720778041458688
[16/Jun/2015 19:41:53] DEBUG [mocktest.standalone:78] Retrieved 50 questions
[17/Jun/2015 16:43:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and position Software Developer
[17/Jun/2015 17:21:38] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position QA Engineer
[17/Jun/2015 21:34:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'compPosCheckDict[Amazon][Software Developer]': [u'true'], u'compPosCheckDict[Microsoft][Software Developer]': [u'false'], u'posCompCheckDict[Software Developer][Microsoft]': [u'false'], u'posCompCheckDict[Software Developer][Amazon]': [u'false'], u'compPosCheckDict[Amazon][QA Engineer]': [u'true'], u'posCompCheckDict[QA Engineer][Amazon]': [u'false']}>
[17/Jun/2015 21:40:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'QA+Engineer%5BAmazon%5D=false&Software+Developer%5BAmazon%5D=false&Software+Developer%5BMicrosoft%5D=false'], u'compPosCheckDict': [u'Amazon%5BQA+Engineer%5D=true&Amazon%5BSoftware+Developer%5D=true&Microsoft%5BSoftware+Developer%5D=false']}>
[17/Jun/2015 21:49:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 21:50:41] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microsoft': False}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microsoft': False}}
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microsoft': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":true},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microsoft': True}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[17/Jun/2015 23:07:18] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[17/Jun/2015 23:07:18] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[17/Jun/2015 23:07:18] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[17/Jun/2015 23:18:36] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[17/Jun/2015 23:18:36] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[17/Jun/2015 23:18:36] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[18/Jun/2015 02:21:35] DEBUG [mocktest.views:163] testId = 9b15e594-1560-11e5-a308-4025c2cdc7f8 choice = 1
[18/Jun/2015 02:23:08] DEBUG [mocktest.views:163] testId = edb8ddb0-1560-11e5-900d-4025c2cdc7f8 choice = 1
[18/Jun/2015 02:52:50] DEBUG [mocktest.views:163] testId = 7c068d6b-1564-11e5-a6fc-4025c2cdc7f8 choice = 1
[18/Jun/2015 17:25:38] DEBUG [mocktest.mentorViews:86] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":false},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 17:25:38] DEBUG [mocktest.mentorViews:89] {u'Amazon': {u'QA Engineer': False, u'Software Developer': False}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 17:25:38] DEBUG [mocktest.mentorViews:90] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microsoft': True}}
[18/Jun/2015 17:26:39] DEBUG [mocktest.mentorViews:86] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":false},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 17:26:39] DEBUG [mocktest.mentorViews:89] {u'Amazon': {u'QA Engineer': True, u'Software Developer': False}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 17:26:39] DEBUG [mocktest.mentorViews:90] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': False, u'Microsoft': True}}
[18/Jun/2015 17:36:42] DEBUG [mocktest.mentorViews:87] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software Developer":false}}']}>
[18/Jun/2015 17:36:42] DEBUG [mocktest.mentorViews:90] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Software Developer': False}}
[18/Jun/2015 17:36:42] DEBUG [mocktest.mentorViews:91] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft': False}}
[18/Jun/2015 17:42:44] DEBUG [mocktest.mentorViews:86] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 17:42:44] DEBUG [mocktest.mentorViews:89] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 17:42:44] DEBUG [mocktest.mentorViews:90] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[18/Jun/2015 17:43:14] DEBUG [mocktest.mentorViews:86] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 17:43:14] DEBUG [mocktest.mentorViews:89] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 17:43:14] DEBUG [mocktest.mentorViews:90] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[18/Jun/2015 17:47:23] DEBUG [mocktest.mentorViews:86] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":false},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 17:47:23] DEBUG [mocktest.mentorViews:89] {u'Amazon': {u'QA Engineer': False, u'Software Developer': False}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 17:47:23] DEBUG [mocktest.mentorViews:90] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microsoft': True}}
[18/Jun/2015 17:48:33] DEBUG [mocktest.mentorViews:86] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 17:48:33] DEBUG [mocktest.mentorViews:89] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 17:48:33] DEBUG [mocktest.mentorViews:90] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[18/Jun/2015 20:37:55] DEBUG [mocktest.views:162] testId = d4a1b291-15f9-11e5-8868-4025c2cdc7f8 choice = 1
[18/Jun/2015 20:38:26] DEBUG [mocktest.mentorViews:92] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":false},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 20:38:26] DEBUG [mocktest.mentorViews:95] {u'Amazon': {u'QA Engineer': False, u'Software Developer': False}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 20:38:26] DEBUG [mocktest.mentorViews:96] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microsoft': True}}
[18/Jun/2015 20:38:42] DEBUG [mocktest.mentorViews:92] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[18/Jun/2015 20:38:42] DEBUG [mocktest.mentorViews:95] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[18/Jun/2015 20:38:42] DEBUG [mocktest.mentorViews:96] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[19/Jun/2015 06:37:41] DEBUG [mocktest.views:162] testId = 97523a45-164d-11e5-926a-4025c2cdc7f8 choice = 1
[19/Jun/2015 06:37:56] DEBUG [mocktest.mentorViews:92] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[19/Jun/2015 06:37:56] DEBUG [mocktest.mentorViews:95] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
[19/Jun/2015 06:37:56] DEBUG [mocktest.mentorViews:96] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsoft': True}}
[19/Jun/2015 06:47:52] DEBUG [mocktest.views:162] testId = 0df4b4de-164f-11e5-a918-4025c2cdc7f8 choice = 1
[19/Jun/2015 07:25:30] DEBUG [mocktest.views:162] testId = 365463a1-1654-11e5-8002-4025c2cdc7f8 choice = 1
[19/Jun/2015 07:26:11] DEBUG [mocktest.mentorViews:112] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software Developer":true}}']}>
[19/Jun/2015 07:26:11] DEBUG [mocktest.mentorViews:115] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Software Developer': True}}
