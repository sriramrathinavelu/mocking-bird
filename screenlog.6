sriram@ubuntu:/space/hashincludetest/mocking-bird$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird$ python manage.py shell
Python 2.7.3 (default, Apr 10 2013, 06:20:15) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> d = {}
>>> d[Kfrom collections import DEfa[K[K[K[Kdef
def
>>> from collections import defaultdict
>>> d = def
def           defaultdict(  
>>> d = defaultdict(lambda [K :{}}[K)
>>> d = defaultdict(lambda :{})[1P[1P[1P[1P[1P[1P :{})[1P:{})[1P{})
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: first argument must be callable
>>> d = defaultdict({})lambda :{})
>>> d[1]['nae[Kme']=['one']
>>> d
defaultdict(<function <lambda> at 0x3b367d0>, {1: {'name': ['one']}})
>>> d[1]['name']=['one'][1P'one'][C[C[C[C[C[C[K
>>> d[1]['name']='one'[C[C[C[C[C[K
defaultdict(<function <lambda> at 0x3b367d0>, {1: {'name': 'one'}})
>>> d[1]['name']='one'[C[C[C[C[C[K[1]['name']=['one'][C[C[C[C[C = defaultdict(lambda :{})x:{})[C[C[1P})[1P)x)
>>> d = defaultdict(lambda x:x)[C[C[C[C[C[K[1]['name']='one'[C[C[C[C[C[K[1]['name']='one'
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: <lambda>() takes exactly 1 argument (0 given)
>>> d[1]['name']='one'[1P'name']='one'[C[C[C[C[C[C[C[C[1Pname']='one'[C[C[C[C[C[C[C[C[1Pame']='one'[C[C[C[C[C[C[C[C[1Pme']='one'[C[C[C[C[C[C[C[C[1Pe']='one'[1P']='one'[1P]='one'[1P='one'[1P'one'[1Pone'[1Pne'[1Pe'[1P'[K
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: <lambda>() takes exactly 1 argument (0 given)
>>> d[1](1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: <lambda>() takes exactly 1 argument (0 given)
>>> d[1](1)[K['name']='one'[C[C[C[C[C = defaultdict(lambda x:x)[C[C[C[C[C[K = defaultdict(lambda x:x)[C[1P)[1P)[1P)[1P):)[)])
>>> d[1].append(0)
>>> d[1].append(0)[1P)1)
>>> d[1].append(1)[1P)2)
>>> d
defaultdict(<function <lambda> at 0x3b36848>, {1: [0, 1, 2]})
>>> d[1]
[0, 1, 2]
>>> d.h[Kkeys()
[1]
>>> import cgu[Ki
>>> cgi.escape("<test>")
'&lt;test&gt;'
>>> d
defaultdict(<function <lambda> at 0x3b36848>, {1: [0, 1, 2]})
>>> d.iteritems()
<dictionary-itemiterator object at 0x7fcf640321b0>
>>> d.iteritems()[C[C[C[Cfd.iteritems()[C[C[C[C[Cod.iteritems()[C[C[C[C[C[Crd.iteritems()[C[C[C[C[C[C[C d.iteritems()[C[C[C[C[C[C[C[Ckd.iteritems()[C[C[C[C[C[C[C[C[C,d.iteritems()[C[C[C[C[C[C[C[C[C[Cvd.iteritems()[C[C[C[C[C[C[C[C[C[C[C d.iteritems()id.iteritems()nd.iteritems() d.iteritems()[C[C[C[C[C[C[C[C[C[C[C[C[C:
...  print k,v
... 
1 [0, 1, 2]
>>>  print k,v[C[C[C[Cfor k,v in d.iteritems():
... for k,v in d.iteritems():[C[C[C[C[15P print k,v[C[C[C[Cfor k,v in d.iteritems():[C[C[C[C[15P print k,v[K[K[K[K[K[K[K[K[Kfor v in [K[K[K[K[K_v in v: print _v
... 
0
1
2
>>> from mocktest.models[Ks import Users
>>> u = Uers[K[K[Ksers.objects.all()
>>> len(u)(
... len(u)(
KeyboardInterrupt
>>> len(u)([K
4
>>> len(u)([C[C[C[Cu = Users.objects.all()[K[K[K[K[Kal().limit(1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ModelQuerySet' object has no attribute 'al'
>>> u = Users.objects.al().limit(1)[Cl().limit(1)
>>> u = Users.objects.all().limit(1)[1P().limit(1)[C[C[C[Clen(u)[K
1
>>> len(u)[C[C[C[Cu = Users.objects.all().limit(1)[C[C[C[C[C[C[C[C[Clen(u)[K[C[C[C[C[Ku[0]
Users(username=u'Username', password=u'Password', firstname=u'First Name', lastname=u'Last Name', email=u'E-Mail', phone=None, fbid=None, rating=1200, ctime=datetime.datetime(2015, 6, 3, 2, 35, 19, 775000), mtime=datetime.datetime(2015, 6, 3, 2, 35, 19, 775000))
>>> u[0]len(u)[C[C[C[Cu = Users.objects.all().limit(1)[1P)2),)3)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: limit() takes exactly 2 arguments (3 given)
>>> u = Users.objects.all().limit(2,3)[1P,3)[1P3)
>>> u = Users.objects.all().limit(3)2,3)[C[C[C[C[C[0][Klen(u)[C[C[C[Cu = Users.objects.all().limit(1)[C[C[C[Clen(u)[K
3
>>> len(u)[C[C[C[Cu = Users.objects.all().limit(3)2,3)[C[C[C[C[C[0][Klen(u)[C[C[C[Cu = Users.objects.all().limit(1)[1P().limit(1)[C[C[C[Clen(u)[K([C[C[C[Cu = Users.objects.all()[2:3]
>>> len(u)
1
>>> u[0]
Users(username=u'aschandr', password=u'Password', firstname=u'Akshaya', lastname=u'S Chandrabose', email=u'ak@gmail.com', phone=u'4808623631', fbid=None, rating=1200, ctime=datetime.datetime(2015, 5, 28, 4, 18, 2, 483000), mtime=datetime.datetime(2015, 5, 28, 4, 18, 2, 483000))
>>> u[0]len(u)[C[C[C[Cu = Users.objects.all()[2:3][K[K[K[K[K[2]
>>> u
Users(username=u'aschandr', password=u'Password', firstname=u'Akshaya', lastname=u'S Chandrabose', email=u'ak@gmail.com', phone=u'4808623631', fbid=None, rating=1200, ctime=datetime.datetime(2015, 5, 28, 4, 18, 2, 483000), mtime=datetime.datetime(2015, 5, 28, 4, 18, 2, 483000))
>>> from cqlengine import BatchQuery
>>> from cqlengine import BatchQuery[C[C[C[Cu[K = Users.objects.all()[2][C[C[C[C[C[0][K = Users.objects.all()[2][K[K[K[K[K[K[K[Kall().count()
>>> u
4
>>> import math
>>> math.ceil(45/10)
4.0
>>> 45/1math.ceil(45/10).)0)
5.0
>>> math.ceil(45/10.0)[2P)[C[C[C[C[5Pimport math[C[C[C[Cu[K = Users.objects.all().count()[C[C[C[Cfrom cqlengine import BatchQuery[C[C[C[C[1Pu = Users.objects.all().count()
>>> u
4
>>> u = Users.objects.all().count()[K[K[K[K[K[K[K[K[0:100]
>>> len(u)
4
>>> 
Broadcast message from sriram@ubuntu
	(/dev/tty2) at 16:26 ...

The system is going down for reboot NOW!
