sriram@ubuntu:/space/hashincludetest/mocking-bird$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird$ cd mockingsite/
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ ls
__init__.py  __init__.pyc  logfile  logfile.1  settings.py  settings.pyc  [0m[01;34mstatic[0m  urls.py  urls.pyc  wsgi.py  wsgi.pyc
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ vi urls.py
[?1049h[?1h=[1;38r[34l[34h[?25h[23m[24m[0m[H[J[?25l[38;1H"urls.py" 25L, 998C[1;1H[31m"""mockingsite URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/1.8/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
Including another URLconf
    1. Add an import:  from blog import urls as blog_urls
    2. Add a URL to urlpatterns:  url(r'^blog/', include(blog_urls))
"""[0m
[35mfrom[0m django.conf.urls [35mimport[0m include, url
[35mfrom[0m django.contrib [35mimport[0m admin
[35mfrom[0m django.conf [35mimport[0m settings
[35mfrom[0m django.conf.urls.static [35mimport[0m static

urlpatterns = [
    url([31m'^'[0m, include([31m'mocktest.urls'[0m)),
    url([31m'^ajaxUtil/'[0m, include([31m'mocktest.ajaxUrls'[0m)),
    url([31mr'^admin/'[0m, include([31m'mocktest.adminUrls'[0m)),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
[1m[34m~                                                                                                                                              [27;1H~                                                                                                                                              [28;1H~                                                                                                                                              [29;1H~                                                                                                                                              [30;1H~                                                                                                                                              [31;1H~                                                                                                                                              [32;1H~                                                                                                                                              [33;1H~                                                                                                                                              [34;1H~                                                                                                                                              [35;1H~                                                                                                                                              [36;1H~                                                                                                                                              [37;1H~                                                                                                                                              [0m[38;126H2,0-1[9CAll[2;1H[34h[?25h[?25l[38;126H3,1  [3;1H[34h[?25h[?25l[38;126H4[4;1H[34h[?25h[?25l[38;126H5[5;1H[34h[?25h[?25l[38;126H6[6;1H[34h[?25h[?25l[38;126H7[7;1H[34h[?25h[?25l[38;126H8[8;1H[34h[?25h[?25l[38;126H9[9;1H[34h[?25h[?25l[38;126H10,1[10;1H[34h[?25h[?25l[38;127H1[11;1H[34h[?25h[?25l[38;127H2[12;1H[34h[?25h[?25l[38;127H3[13;1H[34h[?25h[?25l[38;127H4[14;1H[34h[?25h[?25l[38;127H5[15;1H[34h[?25h[?25l[38;127H6[16;1H[34h[?25h[?25l[38;127H7[17;1H[34h[?25h[?25l[38;127H8[18;1H[34h[?25h[?25l[38;1H[K[38;1H:[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l[38;1H[K[38;1H[?1l>[34h[?25h[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ ls
__init__.py  __init__.pyc  logfile  logfile.1  settings.py  settings.pyc  [0m[01;34mstatic[0m  urls.py  urls.pyc  wsgi.py  wsgi.pyc
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[09/Jun/2015 07:10:55] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:29:09] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:44:50] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:00] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:09] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:03] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: False Existing combination: False
[09/Jun/2015 08:17:52] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:27:20] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:106] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:109] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:31:51] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 14:04:34] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:106] Adding company Amazon and position Software Developer
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:109] Existing Company: True Existing Position: True Existing combination: True
[11/Jun/2015 15:47:37] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[11/Jun/2015 22:01:50] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[11/Jun/2015 22:03:43] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[12/Jun/2015 16:45:58] DEBUG [mocktest.views:58] Start Time: 1434214800 End Time: 1434222000
[13/Jun/2015 17:06:15] DEBUG [mocktest.views:58] Start Time: 1434305100 End Time: 1434308700
[13/Jun/2015 18:44:26] DEBUG [mocktest.views:58] Start Time: 1434314640 End Time: 1434321840
[14/Jun/2015 14:50:42] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 14:51:19] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 15:18:59] DEBUG [mocktest.views:59] Start Time: 1434305880 End Time: 1434309480
[14/Jun/2015 18:20:03] DEBUG [mocktest.views:59] Start Time: 1434306000 End Time: 1434306120
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
logfile    logfile.1  
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile.[K
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...

                   [1mSUMMARY[0m [1mOF[0m [1mLESS[0m [1mCOMMANDS[0m

      Commands marked with * may be preceded by a number, [4mN[24m.
      Notes in parentheses indicate the behavior if [4mN[24m is given.

  h  H                 Display this help.
  q  :q  Q  :Q  ZZ     Exit.
 ---------------------------------------------------------------------------

                           [1mMOVING[0m

  e  ^E  j  ^N  CR  *  Forward  one line   (or [4mN[24m lines).
  y  ^Y  k  ^K  ^P  *  Backward one line   (or [4mN[24m lines).
  f  ^F  ^V  SPACE  *  Forward  one window (or [4mN[24m lines).
  b  ^B  ESC-v      *  Backward one window (or [4mN[24m lines).
  z                 *  Forward  one window (and set window to [4mN[24m).
  w                 *  Backward one window (and set window to [4mN[24m).
  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.
  d  ^D             *  Forward  one half-window (and set half-window to [4mN[24m).
  u  ^U             *  Backward one half-window (and set half-window to [4mN[24m).
  ESC-)  RightArrow *  Left  one half screen width (or [4mN[24m positions).
  ESC-(  LeftArrow  *  Right one half screen width (or [4mN[24m positions).
  F                    Forward forever; like "tail -f".
  r  ^R  ^L            Repaint screen.
  R                    Repaint screen, discarding buffered input.
        ---------------------------------------------------
        Default "window" is the screen height.
        Default "half-window" is half of the screen height.
 ---------------------------------------------------------------------------

                          [1mSEARCHING[0m

  /[4mpattern[24m          *  Search forward for ([4mN[24m-th) matching line.
  ?[4mpattern[24m          *  Search backward for ([4mN[24m-th) matching line.
  n                 *  Repeat previous search (for [4mN[24m-th occurrence).
  N                 *  Repeat previous search in reverse direction.
[3mHELP -- Press RETURN for more, or q when done[23m[K[K...skipping...
  -" [[4mc[24m[[4mc[24m]]  .  --quotes=[[4mc[24m[[4mc[24m]]
                  Set shell quote characters.
  -~  ........  --tilde
                  Don't display tildes after end of file.
  -# [[4mN[24m]  ....  --shift=[[4mN[24m]
                  Horizontal scroll amount (0 = one half screen width)
      ........  --no-keypad
                  Don't send keypad init/deinit sequence.
      ........  --follow-name
                  The F command changes files if the input file is renamed.


 ---------------------------------------------------------------------------

                          [1mLINE[0m [1mEDITING[0m

        These keys can be used to edit text being entered 
        on the "command line" at the bottom of the screen.

 RightArrow                       ESC-l     Move cursor right one character.
 LeftArrow                        ESC-h     Move cursor left one character.
 CNTL-RightArrow  ESC-RightArrow  ESC-w     Move cursor right one word.
 CNTL-LeftArrow   ESC-LeftArrow   ESC-b     Move cursor left one word.
 HOME                             ESC-0     Move cursor to start of line.
 END                              ESC-$     Move cursor to end of line.
 BACKSPACE                                  Delete char to left of cursor.
 DELETE                           ESC-x     Delete char under cursor.
 CNTL-BACKSPACE   ESC-BACKSPACE             Delete word to left of cursor.
 CNTL-DELETE      ESC-DELETE      ESC-X     Delete word under cursor.
 CNTL-U           ESC (MS-DOS only)         Delete entire line.
 UpArrow                          ESC-k     Retrieve previous command line.
 DownArrow                        ESC-j     Retrieve next command line.
 TAB                                        Complete filename & cycle.
 SHIFT-TAB                        ESC-TAB   Complete filename & reverse cycle.
 CNTL-L                                     Complete filename, list all.


[3mHELP -- END -- Press g to see it again, or q when done[23m[K...skipping...
[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[09/Jun/2015 07:10:55] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:29:09] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:44:50] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:00] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:09] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:03] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: False Existing combination: False
[09/Jun/2015 08:17:52] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:27:20] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:106] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:109] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:31:51] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 14:04:34] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:106] Adding company Amazon and position Software Developer
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:109] Existing Company: True Existing Position: True Existing combination: True
[11/Jun/2015 15:47:37] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[11/Jun/2015 22:01:50] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[11/Jun/2015 22:03:43] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[12/Jun/2015 16:45:58] DEBUG [mocktest.views:58] Start Time: 1434214800 End Time: 1434222000
[13/Jun/2015 17:06:15] DEBUG [mocktest.views:58] Start Time: 1434305100 End Time: 1434308700
[13/Jun/2015 18:44:26] DEBUG [mocktest.views:58] Start Time: 1434314640 End Time: 1434321840
[14/Jun/2015 14:50:42] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 14:51:19] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 15:18:59] DEBUG [mocktest.views:59] Start Time: 1434305880 End Time: 1434309480
[14/Jun/2015 18:20:03] DEBUG [mocktest.views:59] Start Time: 1434306000 End Time: 1434306120
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[09/Jun/2015 07:10:55] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:29:09] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:44:50] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:00] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:09] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:03] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: False Existing combination: False
[09/Jun/2015 08:17:52] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:27:20] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:106] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:109] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:31:51] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 14:04:34] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:106] Adding company Amazon and position Software Developer
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:109] Existing Company: True Existing Position: True Existing combination: True
[11/Jun/2015 15:47:37] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[11/Jun/2015 22:01:50] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[11/Jun/2015 22:03:43] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[12/Jun/2015 16:45:58] DEBUG [mocktest.views:58] Start Time: 1434214800 End Time: 1434222000
[13/Jun/2015 17:06:15] DEBUG [mocktest.views:58] Start Time: 1434305100 End Time: 1434308700
[13/Jun/2015 18:44:26] DEBUG [mocktest.views:58] Start Time: 1434314640 End Time: 1434321840
[14/Jun/2015 14:50:42] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 14:51:19] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 15:18:59] DEBUG [mocktest.views:59] Start Time: 1434305880 End Time: 1434309480
[14/Jun/2015 18:20:03] DEBUG [mocktest.views:59] Start Time: 1434306000 End Time: 1434306120
[14/Jun/2015 18:25:37] DEBUG [mocktest.views:163] testId = f9bf5fd7-12c1-11e5-8c1f-4025c2cdc7f8 choice = 2
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ sriram@ubuntu:/space/hashincludetest/mocking-bird$ cd /space/hashincludetest/mocking-bird; cd mockingsite 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ ls
__init__.py  __init__.pyc  logfile  logfile.1  settings.py  settings.pyc  [0m[01;34mstatic[0m  urls.py  urls.pyc  wsgi.py  wsgi.pyc
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[05/Jun/2015 14:28:45] DEBUG [mocktest.DAOUtil:48] Escaped using cgi
[09/Jun/2015 07:10:55] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:29:09] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 07:44:50] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:00] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:56:09] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:03] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 07:57:16] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: False Existing combination: False
[09/Jun/2015 08:17:52] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:18:02] DEBUG [mocktest.DAOUtil:114] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:27:20] DEBUG [mocktest.adminForms:22] [(u'Amazon', u'Amazon')]
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:106] Adding company Microsoft and positionSoftware Developer
[09/Jun/2015 08:29:38] DEBUG [mocktest.DAOUtil:109] Existing Company: False Existing Position: True Existing combination: False
[09/Jun/2015 08:31:51] DEBUG [mocktest.adminForms:22] [(u'Microsoft', u'Microsoft'), (u'Amazon', u'Amazon')]
[09/Jun/2015 14:04:34] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:106] Adding company Amazon and position Software Developer
[09/Jun/2015 16:05:02] DEBUG [mocktest.DAOUtil:109] Existing Company: True Existing Position: True Existing combination: True
[11/Jun/2015 15:47:37] DEBUG [mocktest.backend:21] Authenticating user: sriram1
[11/Jun/2015 22:01:50] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[11/Jun/2015 22:03:43] DEBUG [mocktest.views:58] Start Time: 1434063600 End Time: 1434067200
[12/Jun/2015 16:45:58] DEBUG [mocktest.views:58] Start Time: 1434214800 End Time: 1434222000
[13/Jun/2015 17:06:15] DEBUG [mocktest.views:58] Start Time: 1434305100 End Time: 1434308700
[13/Jun/2015 18:44:26] DEBUG [mocktest.views:58] Start Time: 1434314640 End Time: 1434321840
[14/Jun/2015 14:50:42] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 14:51:19] DEBUG [mocktest.views:59] Start Time: 1434384000 End Time: 1434391200
[14/Jun/2015 15:18:59] DEBUG [mocktest.views:59] Start Time: 1434305880 End Time: 1434309480
[14/Jun/2015 18:20:03] DEBUG [mocktest.views:59] Start Time: 1434306000 End Time: 1434306120
[14/Jun/2015 18:25:37] DEBUG [mocktest.views:163] testId = f9bf5fd7-12c1-11e5-8c1f-4025c2cdc7f8 choice = 2
[15/Jun/2015 19:09:07] DEBUG [mocktest.views:59] Start Time: 1434396000 End Time: 1434399600
[15/Jun/2015 19:22:54] DEBUG [mocktest.views:163] testId = b97cefd9-1085-11e5-9210-4025c2cdc7f8 choice = 2
[15/Jun/2015 19:23:47] DEBUG [mocktest.views:163] testId = b97cefd9-1085-11e5-9210-4025c2cdc7f8 choice = 1
[16/Jun/2015 18:20:34] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position Software Developer
[16/Jun/2015 18:20:34] ERROR [mocktest.DAOUtil:118] Encounter exception Can't resolve column name: 'companyName'
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ ls
__init__.py  __init__.pyc  logfile  logfile.1  settings.py  settings.pyc  [0m[01;34mstatic[0m  urls.py  urls.pyc  wsgi.py  wsgi.pyc
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ cd static/
admin/            bower_components/ mocktest/         
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ cd static/mocktest/
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest$ ls
[0m[01;34mfonts[0m  [01;34mimages[0m  [01;34mscripts[0m  [01;34mstyles[0m
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest$ cd styles/
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ l
autocomplete.css  fancyDate.css         jquery.flipcountdown.css  [0m[01;32mjquery.tree.css[0m*  [01;34mstyles[0m/
components.css    jquery.countdown.css  jquerymobile.css          main.css
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ cd ..
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest$ cd scripts/
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/scripts$ ls
jquery.cookie.js     jquery.flipcountdown.js  jquery.tree.min.js  main.js      [0m[01;34mscripts[0m      testmain.min.js
jquery.countdown.js  jquery.plugin.min.js     jsutils.js          main.min.js  testmain.js
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/scripts$ cd ../styles/
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ ls
autocomplete.css  fancyDate.css         jquery.flipcountdown.css  [0m[01;32mjquery.tree.css[0m  [01;34mstyles[0m
components.css    jquery.countdown.css  jquerymobile.css          main.css
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ vi jy[Kquery.y[Kr[K[Kt[K.tree.css 
[?1049h[?1h=[1;38r[34l[34h[?25h[23m[24m[0m[H[J[?25l[38;1H"jquery.tree.css" [noeol] 45L, 837C[1;1H[36m.daredevel-tree[0m [33mli[0m [36m{[0m
    [32mlist-style-type[0m: [32mnone[0m;
    [32mposition[0m: [32mrelative[0m;
[36m}

.daredevel-tree[0m [33mli[0m [33mspan[0m[36m.daredevel-tree-label[0m [36m{[0m
    [32mcursor[0m: [32mdefault[0m;
    [32mz-index[0m: [31m1[0m;
[36m}[0m
[34m/* collapse */[0m
[36m.daredevel-tree[0m [33mli[0m [33mspan[0m[36m.daredevel-tree-anchor[0m [36m{[0m
    [32mcursor[0m: [32mdefault[0m;
    [32mposition[0m: [32mabsolute[0m;
    [32mtop[0m: [31m1px[0m;
    [32mleft[0m: [31m-16px[0m;
[36m}[0m

[34m/* dnd */[0m
[36m.daredevel-tree[0m [33mli[0m [33mspan[0m[36m.prepended[0m [36m{[0m
    [32mposition[0m: [32mabsolute[0m;
    [32mleft[0m: [31m0px[0m;
    [32mtop[0m: [31m-5px[0m;
    [32mz-index[0m: [31m2[0m;
    [32mvisibility[0m: [32mhidden[0m;
    [32mheight[0m: [31m10px[0m;
    [32mwidth[0m: [31m100px[0m;
    [32moverflow[0m: [32mhidden[0m;
    [32mbackground-image[0m: [36murl([0m[31m"images/anchor.gif"[0m[36m)[0m;
[36m}

.daredevel-tree[0m [33mli[0m [33mspan[0m[36m.prepended.over[0m [36m{[0m
    [32mvisibility[0m: [32mvisible[0m;
[36m}

.daredevel-tree[0m [33mli[0m [33mspan[0m[36m.droppable-label[0m [36m{[0m
    [32mposition[0m: [32mabsolute[0m;
    [32mleft[0m: [31m0px[0m;[38;126H1,1[11CTop[1;1H[34h[?25h[?25l[38;126H2[2;1H[34h[?25h[?25l[38;126H3[3;1H[34h[?25h[?25l[1;20H[36m[46m{


}[0m[38;126H4[4;1H[34h[?25h[?25l[1;20H[36m{


}[0m[38;126H5,0-1[5;1H[34h[?25h[?25l[38;126H6,1  [6;1H[34h[?25h[?25l[38;126H7[7;1H[34h[?25h[?25l[38;126H8[8;1H[34h[?25h[?25l[6;46H[36m[46m{


}[0m[38;126H9[9;1H[34h[?25h[?25l[6;46H[36m{


}[0m[38;126H10,1[10;1H[34h[?25h[?25l[38;127H1[11;1H[34h[?25h[?25l[38;127H2[12;1H[34h[?25h[?25l[38;127H3[13;1H[34h[?25h[?25l[38;127H4[14;1H[34h[?25h[?25l[38;127H5[15;1H[34h[?25h[?25l[11;47H[36m[46m{[16;1H}[0m[38;127H6[16;1H[34h[?25h[?25l[11;47H[36m{[16;1H}[0m[38;127H7,0-1[17;1H[34h[?25h[?25l[38;127H8,1  [18;1H[34h[?25h[?25l[38;127H9[19;1H[34h[?25h[?25l[38;126H20[20;1H[34h[?25h[?25l[38;127H1[21;1H[34h[?25h[?25l[38;127H2[22;1H[34h[?25h[?25l[38;127H3[23;1H[34h[?25h[?25l[38;127H4[24;1H[34h[?25h[?25l[38;127H5[25;1H[34h[?25h[?25l[38;127H6[26;1H[34h[?25h[?25l[38;127H7[27;1H[34h[?25h[?25l[38;127H8[28;1H[34h[?25h[?25l[19;35H[36m[46m{[29;1H}[0m[38;127H9[29;1H[34h[?25h[?25l[19;35H[36m{[29;1H}[0m[38;126H30,0-1[30;1H[34h[?25h[?25l[19;35H[36m[46m{[29;1H}[0m[38;126H29,1  [29;1H[34h[?25h[?25l[19;35H[36m{[29;1H}[0m[38;127H8[28;1H[34h[?25h[?25l[38;129H47[28;47H[34h[?25h[?25l[28;26H[36m[46m([19C)[0m[38;130H6[28;46H[34h[?25h[?25l[28;26H[36m([19C)[0m[38;130H5[28;45H[34h[?25h[?25l[38;130H4[28;44H[34h[?25h[?25l[38;130H3[28;43H[34h[?25h[?25l[38;130H2[28;42H[34h[?25h[?25l[38;130H1[28;41H[34h[?25h[?25l[38;130H0[28;40H[34h[?25h[?25l[38;129H39[28;39H[34h[?25h[?25l[38;130H8[28;38H[34h[?25h[?25l[38;130H7[28;37H[34h[?25h[?25l[38;130H6[28;36H[34h[?25h[?25l[38;130H5[28;35H[34h[?25h[?25l[38;130H4[28;34H[34h[?25h[?25l[38;130H3[28;33H[34h[?25h[?25l[38;130H2[28;32H[34h[?25h[?25l[38;130H1[28;31H[34h[?25h[?25l[38;130H0[28;30H[34h[?25h[?25l[38;129H29[28;29H[34h[?25h[?25l[38;130H8[28;28H[34h[?25h[?25l[38;1H[1m-- INSERT --[0m[38;13H[K[38;126H28,28[9CTop[28;28H[34h[?25h[?25l[31m".images/anchor.gif"[0m[36m)[0m;[38;130H9[28;29H[34h[?25h[?25l[31m..images/anchor.gif"[0m[36m)[0m;[38;129H30[28;30H[34h[?25h[?25l[31m./images/anchor.gif"[0m[36m)[0m;[38;130H1[28;31H[34h[?25h[?25l[38;130H2[28;32H[34h[?25h[?25l[38;130H3[28;33H[34h[?25h[?25l[38;130H4[28;34H[34h[?25h[?25l[38;130H5[28;35H[34h[?25h[?25l[38;130H6[28;36H[34h[?25h[?25l[38;130H7[28;37H[34h[?25h[?25l[38;130H8[28;38H[34h[?25h[?25l[31m/ianchor.gif"[0m[36m)[0m;[38;130H9[28;39H[34h[?25h[?25l[31micanchor.gif"[0m[36m)[0m;[38;129H40[28;40H[34h[?25h[?25l[31mcoanchor.gif"[0m[36m)[0m;[38;130H1[28;41H[34h[?25h[?25l[31monanchor.gif"[0m[36m)[0m;[38;130H2[28;42H[34h[?25h[?25l[31mnsanchor.gif"[0m[36m)[0m;[38;130H3[28;43H[34h[?25h[?25l[31ms/anchor.gif"[0m[36m)[0m;[38;130H4[28;44H[34h[?25h[?25l[19;35H[36m[46m{[29;1H}[0m[38;127H9,2 [29;2H[34h[?25h[?25l[19;35H[36m{[29;1H}[0m[38;126H30,1[30;1H[34h[?25h[?25l[31;40H[36m[46m{

}[0m[38;127H1,41[31;41H[34h[?25h[?25l[36m{

}[0m[38;127H2,25[32;25H[34h[?25h[?25l[31;40H[36m[46m{

}[0m[38;127H3,2 [33;2H[34h[?25h[?25l[31;40H[36m{

}[0m[38;127H5,42[35;42H[34h[?25h[?25l[38;127H6,24[36;24H[34h[?25h[?25l[38;127H7,15[37;15H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;4H [32mtop[0m: [31m5px[0m;[38;126H[K[38;126H38,14[9C12%[37;14H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;4H [32mz-index[0m: [31m2[0m;[38;126H[K[38;126H39,16[9C25%[37;16H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;4H [32mvisibility[0m: [32mhidden[0m;[38;126H[K[38;126H40,24[9C37%[37;24H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;4H [32mheight[0m: [31m8px[0m;[38;126H[K[38;126H41,17[9C50%[37;17H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;4H [32mwidth[0m: [31m100px[0m;[38;126H[K[38;126H42,18[9C62%[37;18H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;4H [32moverflow[0m: [32mhidden[0m;[38;126H[K[38;126H43,22[9C75%[37;22H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;4H [32mborder[0m: [32msolid[0m [31m1px[0m;[38;126H[K[38;126H44,23[9C87%[37;23H[34h[?25h[?25l[1;37r[37;1H
[1;38r[37;1H[36m}[0m[38;126H[K[38;126H45,2[10CBot[27;41H[36m[46m{[37;1H}[34h[?25h[?25l[1;37r[0m[1;1H[8L[1;38r[1;1H[36m.daredevel-tree[0m [33mli[0m [36m{[0m
    [32mlist-style-type[0m: [32mnone[0m;
    [32mposition[0m: [32mrelative[0m;
[36m}

.daredevel-tree[0m [33mli[0m [33mspan[0m[36m.daredevel-tree-label[0m [36m{[0m
    [32mcursor[0m: [32mdefault[0m;
    [32mz-index[0m: [31m1[0m;[38;126H[K[38;126H10,1[10CTop[35;41H[36m{[10;1H[34h[?25h[0m[38;1H[K[?25l[38;126H10,1[10CTop[10;1H[34h[?25h[?25l[38;126H[K[38;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h[?25l"jquery.tree.css" 45L, 847C written
[?1l>[34h[?25h[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ 
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest/styles$ cd ..
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static/mocktest$ cd ..
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite/static$ cd ..
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ ls
__init__.py  __init__.pyc  logfile  logfile.1  settings.py  settings.pyc  [0m[01;34mstatic[0m  urls.py  urls.pyc  wsgi.py  wsgi.pyc
sriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[16/Jun/2015 19:40:52] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5743544090230784
[16/Jun/2015 19:40:53] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6203659591352320
[16/Jun/2015 19:40:54] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6293669489410048
[16/Jun/2015 19:40:56] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4792707167813632
[16/Jun/2015 19:40:57] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5726197774286848
[16/Jun/2015 19:40:58] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5067220493271040
[16/Jun/2015 19:40:59] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6312966362234880
[16/Jun/2015 19:41:01] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640618223075328
[16/Jun/2015 19:41:02] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5192351949520896
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=3
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5978736570662912
[16/Jun/2015 19:41:11] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6535983075950592
[16/Jun/2015 19:41:16] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6251247950626816
[16/Jun/2015 19:41:20] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6218115968925696
[16/Jun/2015 19:41:25] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6332980792393728
[16/Jun/2015 19:41:27] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6331656331853824
[16/Jun/2015 19:41:28] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5104398418051072
[16/Jun/2015 19:41:29] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5142823074529280
[16/Jun/2015 19:41:31] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5659044186423296
[16/Jun/2015 19:41:33] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5128688001613824
[16/Jun/2015 19:41:35] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5735545137266688
[16/Jun/2015 19:41:36] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6276805505843200
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4691284505657344
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5752996830904320
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=4
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6153780563279872
[16/Jun/2015 19:41:44] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5125946302529536
[16/Jun/2015 19:41:45] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640239645196288
[16/Jun/2015 19:41:48] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5720778041458688
[16/Jun/2015 19:41:53] DEBUG [mocktest.standalone:78] Retrieved 50 questions
[17/Jun/2015 16:43:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and position Software Developer
[17/Jun/2015 17:21:38] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position QA Engineer
[17/Jun/2015 21:34:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'compPosCheckDict[Amazon][Software Developer]': [u'true'], u'compPosCheckD ict[Microsoft][Software Developer]': [u'false'], u'posCompCheckDict[Software Developer][Microsoft]': [u'false'], u'posCompCheckDict[Software De veloper][Amazon]': [u'false'], u'compPosCheckDict[Amazon][QA Engineer]': [u'true'], u'posCompCheckDict[QA Engineer][Amazon]': [u'false']}>
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[16/Jun/2015 19:40:56] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4792707167813632
[16/Jun/2015 19:40:57] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5726197774286848
[16/Jun/2015 19:40:58] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5067220493271040
[16/Jun/2015 19:40:59] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6312966362234880
[16/Jun/2015 19:41:01] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640618223075328
[16/Jun/2015 19:41:02] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5192351949520896
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=3
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5978736570662912
[16/Jun/2015 19:41:11] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6535983075950592
[16/Jun/2015 19:41:16] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6251247950626816
[16/Jun/2015 19:41:20] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6218115968925696
[16/Jun/2015 19:41:25] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6332980792393728
[16/Jun/2015 19:41:27] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6331656331853824
[16/Jun/2015 19:41:28] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5104398418051072
[16/Jun/2015 19:41:29] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5142823074529280
[16/Jun/2015 19:41:31] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5659044186423296
[16/Jun/2015 19:41:33] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5128688001613824
[16/Jun/2015 19:41:35] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5735545137266688
[16/Jun/2015 19:41:36] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6276805505843200
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4691284505657344
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5752996830904320
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=4
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6153780563279872
[16/Jun/2015 19:41:44] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5125946302529536
[16/Jun/2015 19:41:45] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640239645196288
[16/Jun/2015 19:41:48] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5720778041458688
[16/Jun/2015 19:41:53] DEBUG [mocktest.standalone:78] Retrieved 50 questions
[17/Jun/2015 16:43:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and position Software Developer
[17/Jun/2015 17:21:38] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position QA Engineer
[17/Jun/2015 21:34:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'compPosCheckDict[Amazon][Software Developer]': [u'true'], u'compPosCheckD ict[Microsoft][Software Developer]': [u'false'], u'posCompCheckDict[Software Developer][Microsoft]': [u'false'], u'posCompCheckDict[Software De veloper][Amazon]': [u'false'], u'compPosCheckDict[Amazon][QA Engineer]': [u'true'], u'posCompCheckDict[QA Engineer][Amazon]': [u'false']}>
[17/Jun/2015 21:40:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'QA+Engineer%5BAmazon%5D=false&Software+Developer%5B Amazon%5D=false&Software+Developer%5BMicrosoft%5D=false'], u'compPosCheckDict': [u'Amazon%5BQA+Engineer%5D=true&Amazon%5BSoftware+Developer%5D= true&Microsoft%5BSoftware+Developer%5D=false']}>
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[16/Jun/2015 19:40:59] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6312966362234880
[16/Jun/2015 19:41:01] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640618223075328
[16/Jun/2015 19:41:02] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5192351949520896
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=3
[16/Jun/2015 19:41:10] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5978736570662912
[16/Jun/2015 19:41:11] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6535983075950592
[16/Jun/2015 19:41:16] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6251247950626816
[16/Jun/2015 19:41:20] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6218115968925696
[16/Jun/2015 19:41:25] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6332980792393728
[16/Jun/2015 19:41:27] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6331656331853824
[16/Jun/2015 19:41:28] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5104398418051072
[16/Jun/2015 19:41:29] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5142823074529280
[16/Jun/2015 19:41:31] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5659044186423296
[16/Jun/2015 19:41:33] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5128688001613824
[16/Jun/2015 19:41:35] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5735545137266688
[16/Jun/2015 19:41:36] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6276805505843200
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4691284505657344
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5752996830904320
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=4
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6153780563279872
[16/Jun/2015 19:41:44] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5125946302529536
[16/Jun/2015 19:41:45] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640239645196288
[16/Jun/2015 19:41:48] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5720778041458688
[16/Jun/2015 19:41:53] DEBUG [mocktest.standalone:78] Retrieved 50 questions
[17/Jun/2015 16:43:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and position Software Developer
[17/Jun/2015 17:21:38] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position QA Engineer
[17/Jun/2015 21:34:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'compPosCheckDict[Amazon][Software Developer]': [u'true'], u'compPosCheckD ict[Microsoft][Software Developer]': [u'false'], u'posCompCheckDict[Software Developer][Microsoft]': [u'false'], u'posCompCheckDict[Software De veloper][Amazon]': [u'false'], u'compPosCheckDict[Amazon][QA Engineer]': [u'true'], u'posCompCheckDict[QA Engineer][Amazon]': [u'false']}>
[17/Jun/2015 21:40:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'QA+Engineer%5BAmazon%5D=false&Software+Developer%5B Amazon%5D=false&Software+Developer%5BMicrosoft%5D=false'], u'compPosCheckDict': [u'Amazon%5BQA+Engineer%5D=true&Amazon%5BSoftware+Developer%5D= true&Microsoft%5BSoftware+Developer%5D=false']}>
[17/Jun/2015 21:49:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[16/Jun/2015 19:41:27] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6331656331853824
[16/Jun/2015 19:41:28] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5104398418051072
[16/Jun/2015 19:41:29] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5142823074529280
[16/Jun/2015 19:41:31] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5659044186423296
[16/Jun/2015 19:41:33] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5128688001613824
[16/Jun/2015 19:41:35] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5735545137266688
[16/Jun/2015 19:41:36] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6276805505843200
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4691284505657344
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5752996830904320
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=4
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6153780563279872
[16/Jun/2015 19:41:44] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5125946302529536
[16/Jun/2015 19:41:45] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640239645196288
[16/Jun/2015 19:41:48] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5720778041458688
[16/Jun/2015 19:41:53] DEBUG [mocktest.standalone:78] Retrieved 50 questions
[17/Jun/2015 16:43:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and position Software Developer
[17/Jun/2015 17:21:38] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position QA Engineer
[17/Jun/2015 21:34:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'compPosCheckDict[Amazon][Software Developer]': [u'true'], u'compPosCheckD ict[Microsoft][Software Developer]': [u'false'], u'posCompCheckDict[Software Developer][Microsoft]': [u'false'], u'posCompCheckDict[Software De veloper][Amazon]': [u'false'], u'compPosCheckDict[Amazon][QA Engineer]': [u'true'], u'posCompCheckDict[QA Engineer][Amazon]': [u'false']}>
[17/Jun/2015 21:40:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'QA+Engineer%5BAmazon%5D=false&Software+Developer%5B Amazon%5D=false&Software+Developer%5BMicrosoft%5D=false'], u'compPosCheckDict': [u'Amazon%5BQA+Engineer%5D=true&Amazon%5BSoftware+Developer%5D= true&Microsoft%5BSoftware+Developer%5D=false']}>
[17/Jun/2015 21:49:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:50:41] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=4691284505657344
[16/Jun/2015 19:41:39] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5752996830904320
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:61] Scrapping page: http://www.careercup.com/page?pid=amazon-interview-questions&job=software -engineer-developer-interview-questions&n=4
[16/Jun/2015 19:41:43] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6153780563279872
[16/Jun/2015 19:41:44] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5125946302529536
[16/Jun/2015 19:41:45] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5640239645196288
[16/Jun/2015 19:41:48] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5720778041458688
[16/Jun/2015 19:41:53] DEBUG [mocktest.standalone:78] Retrieved 50 questions
[17/Jun/2015 16:43:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and position Software Developer
[17/Jun/2015 17:21:38] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position QA Engineer
[17/Jun/2015 21:34:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'compPosCheckDict[Amazon][Software Developer]': [u'true'], u'compPosCheckD ict[Microsoft][Software Developer]': [u'false'], u'posCompCheckDict[Software Developer][Microsoft]': [u'false'], u'posCompCheckDict[Software De veloper][Amazon]': [u'false'], u'compPosCheckDict[Amazon][QA Engineer]': [u'true'], u'posCompCheckDict[QA Engineer][Amazon]': [u'false']}>
[17/Jun/2015 21:40:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'QA+Engineer%5BAmazon%5D=false&Software+Developer%5B Amazon%5D=false&Software+Developer%5BMicrosoft%5D=false'], u'compPosCheckDict': [u'Amazon%5BQA+Engineer%5D=true&Amazon%5BSoftware+Developer%5D= true&Microsoft%5BSoftware+Developer%5D=false']}>
[17/Jun/2015 21:49:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:50:41] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software D eveloper":true}}']}>
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': True}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': True}}
[3m(END)[23m[K[K [KESCESC[KOO[KAA[K[HM[16/Jun/2015 19:41:36] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=6276805505843200
[38;1H[K:[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[16/Jun/2015 19:41:48] DEBUG [mocktest.standalone:64] Scrapping Link: http://www.careercup.com/question?id=5720778041458688
[16/Jun/2015 19:41:53] DEBUG [mocktest.standalone:78] Retrieved 50 questions
[17/Jun/2015 16:43:16] DEBUG [mocktest.DAOUtil:111] Adding company Microsoft and position Software Developer
[17/Jun/2015 17:21:38] DEBUG [mocktest.DAOUtil:111] Adding company Amazon and position QA Engineer
[17/Jun/2015 21:34:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'compPosCheckDict[Amazon][Software Developer]': [u'true'], u'compPosCheckD ict[Microsoft][Software Developer]': [u'false'], u'posCompCheckDict[Software Developer][Microsoft]': [u'false'], u'posCompCheckDict[Software De veloper][Amazon]': [u'false'], u'compPosCheckDict[Amazon][QA Engineer]': [u'true'], u'posCompCheckDict[QA Engineer][Amazon]': [u'false']}>
[17/Jun/2015 21:40:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'QA+Engineer%5BAmazon%5D=false&Software+Developer%5B Amazon%5D=false&Software+Developer%5BMicrosoft%5D=false'], u'compPosCheckDict': [u'Amazon%5BQA+Engineer%5D=true&Amazon%5BSoftware+Developer%5D= true&Microsoft%5BSoftware+Developer%5D=false']}>
[17/Jun/2015 21:49:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:50:41] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Softwar e Developer":false}}']}>
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software D eveloper":true}}']}>
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': True}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': True}}
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[17/Jun/2015 21:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software D eveloper":true}}']}>
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': True}}
[17/Jun/2015 22:07:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': True}}
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Softwa re Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[17/Jun/2015 22:13:12] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:15:25] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Softwa re Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Softwa re Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[17/Jun/2015 22:16:20] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Softwa re Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:38:17] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Softwa re Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":true},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': True}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': True}}
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[17/Jun/2015 22:44:51] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Softwa re Developer":false},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': False}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":true},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': True}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': True}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
[17/Jun/2015 22:45:38] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:51:43] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":false,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":true},"QA Engineer":{"Amazon":true},"Software Developer":{"Amazon":true}}']}>
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': True}, u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True}}
[17/Jun/2015 22:52:55] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': False, u'Microso ft': True}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ less logfile
[?1049h[?1h=[03/Jun/2015 08:29:13] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'Answer 1 .. This is the first answer', 'questionid':  UUID('8472c5a3-08b9-11e5-9b37-4025c2cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'qu estion': u'You are given an unsorted array A with elements 0 to n-1, numbers can be repeated in the array. \r\nCreate n sets where the i-th set  is of form\r\nS[i]={a[i],a[a[i]],a[a[a[i]]]\u2026}. \r\nSet has all elements unique. Find the size of the largest set.\r\n\r\nExample:\r\n\r\n Input: a[] = { 1, 2, 3, 4, 4, 5 } \r\nOutput: \r\nSize of Largest set is 4 \r\nPrinting elements in all sets \r\nSet# 0 => 1 2 3 4 \r\nSet# 1 = > 2 3 4 \r\nSet# 2 => 3 4 \r\nSet# 3 => 4 \r\nSet# 4 => 4 \r\nSet# 5 => 5\r\n\r\nPlease provide an algorithm and implementation for the above p roblem', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015, 6, 2, 22,  21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Software Devel oper', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 263000), 'correctanswer': u'This problem can be solved by following the indexes in th e array. \r\n\r\nEach set can be initialized has a hash so that check for duplicates are O(1)\r\n\r\nThe complete code in JAVA for the problem  is\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\n\r\n\r\npublic class IterativeSubset {\r\n\r\n\tpublic static void main(S tring[] args) {\r\n\t\t\r\n\t\tint array[]=new int[]{5,6,3,1,4,7,8,9,2,11,12,2,4,6,9,4,1};\r\n\t\t\r\n\t\tint arrayLngth=array.length;\r\n\t\ti nt i=0;\r\n\t\tSet<Integer> sets=new LinkedHashSet<Integer>();\r\n\t\t\r\n\t\tfor(int j=0;j<arrayLngth;j++)\r\n\t\t{\r\n\t\t\ti=j;\r\n\t\t\twhi le(!sets.contains(array[i]))\r\n\t\t\t{\r\n\t\t\t\ti=array[i];\r\n\t\t\t\tsets.add(i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sets.toString()); \r\n\t\t\tsets.clear();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questionnum': 2}
[03/Jun/2015 08:29:14] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[03/Jun/2015 08:32:30] DEBUG [mocktest.ajaxUtil:23] {'positionid': UUID('cc4333c0-059c-11e5-9a59-4025c2cdc7f8'), 'questiontype': 3, 'companyid' : UUID('cc21e4eb-059c-11e5-9bd0-4025c2cdc7f8'), 'totalmarks': 100.0, 'mtime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'userendtime':  None, 'testendtime': datetime.datetime(2015, 6, 2, 23, 51, 10, 147000), 'givenanswer': u'', 'questionid': UUID('45c55d70-08bf-11e5-97af-4025c2 cdc7f8'), 'questionsanswered': 0, 'isevaluated': False, 'companyname': u'Amazon', 'currentquestion': 0, 'question': u'Find the maximum depth of  parenthesis in a given string.\r\n\r\nSample Input:\r\n(a(b))(c(d(f))g)(y(h))\r\n\r\nCorresponding Output:\r\n3 (f is surrounded by three pair s of parenthesis)', 'choices': [], 'state': 0, 'testid': UUID('abb9c3a8-0975-11e5-b305-4025c2cdc7f8'), 'teststarttime': datetime.datetime(2015,  6, 2, 22, 21, 10, 147000), 'input': u'', 'retrorating': 1200, 'userstarttime': None, 'username': u'sriram1', 'key': u'', 'positionname': u'Sof tware Developer', 'ctime': datetime.datetime(2015, 6, 2, 22, 21, 10, 259000), 'correctanswer': u'\r\n1) make a stack.\r\n2) push every time you  see a (\r\n3) pop every time you see a )\r\n4) store a max value of the stack size.\r\n\r\n', 'totalquestions': 3, 'scoredmarks': 0.0, 'questi onnum': 1}
[3mlogfile[23m[K[K...skipping...
ft': True}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 22:56:24] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 23:02:31] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":true},"Software Developer" :{"Amazon":true,"Microsoft":false}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":true,"Software Developer":true},"Microsoft":{"Software  Developer":false}}']}>
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': True, u'Software Developer': True}, u'Microsoft': {u'Softwa re Developer': False}}
[17/Jun/2015 23:03:07] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': True}, u'Software Developer': {u'Amazon': True, u'Microsoft ': False}}
[17/Jun/2015 23:07:18] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software  Developer":true}}']}>
[17/Jun/2015 23:07:18] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': True}}
[17/Jun/2015 23:07:18] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsof t': True}}
[17/Jun/2015 23:18:36] DEBUG [mocktest.mentorViews:75] <QueryDict: {u'posCompCheckDict': [u'{"QA Engineer":{"Amazon":false},"Software Developer ":{"Amazon":true,"Microsoft":true}}'], u'compPosCheckDict': [u'{"Amazon":{"QA Engineer":false,"Software Developer":true},"Microsoft":{"Software  Developer":true}}']}>
[17/Jun/2015 23:18:36] DEBUG [mocktest.mentorViews:78] {u'Amazon': {u'QA Engineer': False, u'Software Developer': True}, u'Microsoft': {u'Softw are Developer': True}}
[17/Jun/2015 23:18:36] DEBUG [mocktest.mentorViews:79] {u'QA Engineer': {u'Amazon': False}, u'Software Developer': {u'Amazon': True, u'Microsof t': True}}
[18/Jun/2015 02:21:35] DEBUG [mocktest.views:163] testId = 9b15e594-1560-11e5-a308-4025c2cdc7f8 choice = 1
[3m(END)[23m[K[K[?1l>[?1049lsriram@ubuntu:/space/hashincludetest/mocking-bird/mockingsite$ 
Broadcast message from sriram@ubuntu
	(/dev/tty2) at 16:26 ...

The system is going down for reboot NOW!
